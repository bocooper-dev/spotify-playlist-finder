{
  "name": "Spotify Authentication & Token Management",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute",
              "minute": 50
            }
          ]
        }
      },
      "name": "Token Refresh Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300],
      "id": "auth-cron-trigger"
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://accounts.spotify.com/api/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "={{$env.SPOTIFY_CLIENT_ID}}"
            },
            {
              "name": "client_secret", 
              "value": "={{$env.SPOTIFY_CLIENT_SECRET}}"
            }
          ]
        }
      },
      "name": "Get Spotify Access Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [460, 300],
      "id": "spotify-auth-request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "spotify-basic-auth",
          "name": "Spotify Basic Auth"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.access_token}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Token Valid Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300],
      "id": "token-validation"
    },
    {
      "parameters": {
        "key": "spotify_access_token",
        "value": "={{$json.access_token}}",
        "ttl": "={{Math.floor($json.expires_in * 0.9)}}"
      },
      "name": "Store Token in Cache",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [900, 200],
      "id": "cache-token"
    },
    {
      "parameters": {
        "key": "spotify_token_expires_at",
        "value": "={{new Date(Date.now() + ($json.expires_in * 1000)).toISOString()}}",
        "ttl": "={{$json.expires_in}}"
      },
      "name": "Store Token Expiry",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [900, 320],
      "id": "cache-expiry"
    },
    {
      "parameters": {
        "url": "={{$env.NUXT_PUBLIC_APP_URL}}/api/webhooks/n8n",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "event",
              "value": "spotify_token_refreshed"
            },
            {
              "name": "token",
              "value": "={{$json.access_token}}"
            },
            {
              "name": "expires_at",
              "value": "={{new Date(Date.now() + ($json.expires_in * 1000)).toISOString()}}"
            }
          ]
        }
      },
      "name": "Notify App of Token Refresh",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 440],
      "id": "notify-app"
    },
    {
      "parameters": {
        "message": "Spotify token refresh failed: {{$json.error_description || $json.error || 'Unknown error'}}",
        "additionalFields": {
          "level": "error"
        }
      },
      "name": "Log Auth Error",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [900, 520],
      "id": "log-error"
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "spotify-token",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Token Request Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 600],
      "webhookId": "spotify-token-request",
      "id": "token-webhook"
    },
    {
      "parameters": {
        "key": "spotify_access_token"
      },
      "name": "Get Cached Token",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [460, 600],
      "id": "get-cached-token"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.value}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Token Exists Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 600],
      "id": "token-exists-check"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "access_token": "={{$json.value}}",
          "token_type": "Bearer",
          "cached": true
        }
      },
      "name": "Return Cached Token",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 580],
      "id": "return-cached"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "access_token": "={{$json.access_token}}",
          "token_type": "Bearer",
          "expires_in": "={{$json.expires_in}}",
          "cached": false
        }
      },
      "name": "Return Fresh Token",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 680],
      "id": "return-fresh"
    }
  ],
  "connections": {
    "Token Refresh Schedule": {
      "main": [
        [
          {
            "node": "Get Spotify Access Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Spotify Access Token": {
      "main": [
        [
          {
            "node": "Token Valid Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Valid Check": {
      "main": [
        [
          {
            "node": "Store Token in Cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store Token Expiry",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify App of Token Refresh",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Auth Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Request Webhook": {
      "main": [
        [
          {
            "node": "Get Cached Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cached Token": {
      "main": [
        [
          {
            "node": "Token Exists Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Exists Check": {
      "main": [
        [
          {
            "node": "Return Cached Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Spotify Access Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "instanceId": "spotify-auth-workflow"
  },
  "id": "spotify-auth-workflow",
  "tags": [
    {
      "createdAt": "2025-09-10T12:00:00.000Z",
      "updatedAt": "2025-09-10T12:00:00.000Z",
      "id": "spotify",
      "name": "spotify"
    },
    {
      "createdAt": "2025-09-10T12:00:00.000Z", 
      "updatedAt": "2025-09-10T12:00:00.000Z",
      "id": "authentication",
      "name": "authentication"
    }
  ]
}