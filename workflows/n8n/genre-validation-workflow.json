{
  "name": "Spotify Genre Validation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "validate-genres",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Genre Validation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "genre-validation-request",
      "id": "genre-webhook"
    },
    {
      "parameters": {
        "url": "={{$env.N8N_WEBHOOK_URL}}/spotify-token",
        "authentication": "headerAuth",
        "requestMethod": "GET"
      },
      "name": "Get Spotify Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [460, 300],
      "id": "get-token"
    },
    {
      "parameters": {
        "url": "https://api.spotify.com/v1/recommendations/available-genre-seeds",
        "authentication": "headerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$json.access_token}}"
            }
          ]
        }
      },
      "name": "Fetch Available Genres",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [680, 300],
      "id": "fetch-genres"
    },
    {
      "parameters": {
        "key": "spotify_available_genres",
        "value": "={{JSON.stringify($json.genres)}}",
        "ttl": 3600
      },
      "name": "Cache Available Genres",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [900, 200],
      "id": "cache-genres"
    },
    {
      "parameters": {
        "jsCode": "// Extract requested genres from webhook body\nconst requestedGenres = $input.first().json.body.genres || [];\nconst availableGenres = $input.all()[1].json.genres || [];\n\n// Validate each requested genre\nconst validationResults = requestedGenres.map(genre => {\n  const normalizedGenre = genre.toLowerCase().trim();\n  const isValid = availableGenres.includes(normalizedGenre);\n  \n  // Find similar genres if invalid\n  let suggestions = [];\n  if (!isValid) {\n    suggestions = availableGenres.filter(available => \n      available.includes(normalizedGenre) || \n      normalizedGenre.includes(available) ||\n      levenshteinDistance(normalizedGenre, available) <= 2\n    ).slice(0, 3);\n  }\n  \n  return {\n    requested: genre,\n    normalized: normalizedGenre,\n    isValid,\n    suggestions\n  };\n});\n\n// Helper function for string similarity\nfunction levenshteinDistance(str1, str2) {\n  const matrix = [];\n  for (let i = 0; i <= str2.length; i++) {\n    matrix[i] = [i];\n  }\n  for (let j = 0; j <= str1.length; j++) {\n    matrix[0][j] = j;\n  }\n  for (let i = 1; i <= str2.length; i++) {\n    for (let j = 1; j <= str1.length; j++) {\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j] + 1\n        );\n      }\n    }\n  }\n  return matrix[str2.length][str1.length];\n}\n\nconst validGenres = validationResults.filter(result => result.isValid);\nconst invalidGenres = validationResults.filter(result => !result.isValid);\n\nreturn [{\n  json: {\n    totalRequested: requestedGenres.length,\n    validCount: validGenres.length,\n    invalidCount: invalidGenres.length,\n    validGenres: validGenres.map(g => g.normalized),\n    invalidGenres: invalidGenres,\n    isAllValid: invalidGenres.length === 0,\n    validationResults\n  }\n}];"
      },
      "name": "Validate Genres",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "validate-genres"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.invalidCount}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "All Genres Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300],
      "id": "validation-check"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {\n          "success": true,\n          "validGenres": "={{$json.validGenres}}",\n          "totalValidated": "={{$json.validCount}}",\n          "message": "All genres are valid"\n        }
      },
      "name": "Return Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 200],
      "id": "success-response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 400,
        "responseBody": {\n          "success": false,\n          "validGenres": "={{$json.validGenres}}",\n          "invalidGenres": "={{$json.invalidGenres}}",\n          "validCount": "={{$json.validCount}}",\n          "invalidCount": "={{$json.invalidCount}}",\n          "message": "Some genres are invalid. Check suggestions for alternatives."\n        }
      },
      "name": "Return Validation Errors",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 400],
      "id": "error-response"
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyHour",
              "hour": 6
            }
          ]
        }
      },
      "name": "Daily Genre Cache Refresh",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 500],
      "id": "cache-refresh-cron"
    },
    {
      "parameters": {
        "key": "spotify_available_genres"
      },
      "name": "Get Cached Genres",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [460, 400],
      "id": "get-cached-genres"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.value}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Cache Empty Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 400],
      "id": "cache-check"
    },
    {
      "parameters": {
        "jsCode": "// Use cached genres for validation\nconst requestedGenres = $input.first().json.body.genres || [];\nconst availableGenres = JSON.parse($input.all()[1].json.value) || [];\n\n// Same validation logic as above\nconst validationResults = requestedGenres.map(genre => {\n  const normalizedGenre = genre.toLowerCase().trim();\n  const isValid = availableGenres.includes(normalizedGenre);\n  \n  let suggestions = [];\n  if (!isValid) {\n    suggestions = availableGenres.filter(available => \n      available.includes(normalizedGenre) || \n      normalizedGenre.includes(available)\n    ).slice(0, 3);\n  }\n  \n  return {\n    requested: genre,\n    normalized: normalizedGenre,\n    isValid,\n    suggestions\n  };\n});\n\nconst validGenres = validationResults.filter(result => result.isValid);\nconst invalidGenres = validationResults.filter(result => !result.isValid);\n\nreturn [{\n  json: {\n    totalRequested: requestedGenres.length,\n    validCount: validGenres.length,\n    invalidCount: invalidGenres.length,\n    validGenres: validGenres.map(g => g.normalized),\n    invalidGenres: invalidGenres,\n    isAllValid: invalidGenres.length === 0,\n    validationResults,\n    fromCache: true\n  }\n}];"
      },
      "name": "Validate from Cache",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 480],
      "id": "validate-from-cache"
    }
  ],
  "connections": {
    "Genre Validation Webhook": {
      "main": [
        [
          {
            "node": "Get Cached Genres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Cached Genres": {
      "main": [
        [
          {
            "node": "Cache Empty Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Empty Check": {
      "main": [
        [
          {
            "node": "Get Spotify Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validate from Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Spotify Token": {
      "main": [
        [
          {
            "node": "Fetch Available Genres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Available Genres": {
      "main": [
        [
          {
            "node": "Cache Available Genres",
            "type": "main",
            "index": 0
          },
          {
            "node": "Validate Genres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Genres": {
      "main": [
        [
          {
            "node": "All Genres Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate from Cache": {
      "main": [
        [
          {
            "node": "All Genres Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All Genres Valid?": {
      "main": [
        [
          {
            "node": "Return Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Validation Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Genre Cache Refresh": {
      "main": [
        [
          {
            "node": "Get Spotify Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "instanceId": "genre-validation-workflow"
  },
  "id": "genre-validation-workflow",
  "tags": [
    {
      "createdAt": "2025-09-10T12:00:00.000Z",
      "updatedAt": "2025-09-10T12:00:00.000Z",
      "id": "spotify",
      "name": "spotify"
    },
    {
      "createdAt": "2025-09-10T12:00:00.000Z",
      "updatedAt": "2025-09-10T12:00:00.000Z",
      "id": "validation",
      "name": "validation"
    }
  ]
}